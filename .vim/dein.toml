# https://qiita.com/kooooooooooooooooohe/items/fb106e0a0f0969b4ee38

# 基本は github.com のレポジトリーを指定するだけ
[[plugins]]
repo = 'Shougo/dein.vim'

# git clone 後、実行すべきコマンドがある場合はこんな感じ
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
    elseif executable('gmake')
    let cmd = 'gmake'
    else
    let cmd = 'make'
    endif
    let g:dein#plugin.build = cmd
'''

# ステータスラインのテーマ
[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
    let g:airline_theme = 'molokai'
'''

# ステータスラインのテーマ
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

# コードの色
[[plugins]]
repo = 'tomasr/molokai'

# vimfilerを使うために必要
[[plugins]]
repo =  'Shougo/unite.vim'

# ディレクトリ表示
[[plugins]]
repo = 'Shougo/vimfiler'

#ディレクトリ表示
[[plugins]]
repo = 'scrooloose/nerdtree'

################
# syntax check #
################

#[[plugins]]
#repo = 'vim-syntastic/syntastic'
#hook_add = '''
#    set statusline+=%#warningmsg#
#    set statusline+=%{SyntasticStatuslineFlag()}
#    set statusline+=%*
#
#    let g:syntastic_always_populate_loc_list = 1
#    let g:syntastic_auto_loc_list = 1
#    let g:syntastic_check_on_open = 1
#    let g:syntastic_check_on_wq = 0
#'''
# syntasticはairlineと競合してステータスラインがバグる？
# っぽいので、
# https://qiita.com/tashua314/items/5fc82f014e537ded50ff
# を参考に、最近人気っぽいaleに乗り換えてみる
[[plugins]] # lint tool
repo = 'dense-analysis/ale'
hook_add = '''
"行頭のマークが出る部分を常に表示するようにする
let g:ale_sign_column_always = 1
"phpcsのスタイル
"let g:ale_php_phpcs_standard = '~/phpcs.xml,PSR1,PSR2'
"phpcbfのスタイル
"let g:ale_php_phpcbf_standard = '~/phpcs.xml'

"自動整形
let g:ale_fixers = {
\ 'php': ['phpcbf'],
\}
"ファイル保存時に整形実行
let g:ale_fix_on_save = 1
" 保存時のみ実行する
let g:ale_lint_on_text_changed = 0
"lint
let g:ale_linters = {
  \'javascript': ['eslint'],
  \'ruby': ['rubocop', 'reek'],
  \'php': ['phpcs', 'phpcbf'],
  \'Dockerfile': ['dockerfile_lint', 'hadolint'],
  \'scss': ['stylelint']
\}
let g:ale_dockerfile_hadolint_use_docker = 'enable'
let g:ale_scss_stylelint_use_global = 1
" 表示に関する設定
" let g:ale_sign_error = ''
" let g:ale_sign_warning = ''
let g:airline#extensions#ale#open_lnum_symbol = '('
let g:airline#extensions#ale#close_lnum_symbol = ')'
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%]%code: %%s'
highlight link ALEErrorSign Tag
highlight link ALEWarningSign StorageClass
" Ctrl + jで次の指摘へ、Ctrl + kで前の指摘へ移動
nmap <silent> <C-w>k <Plug>(ale_previous_wrap)
nmap <silent> <C-w>j <Plug>(ale_next_wrap)
'''
hook_post_source = '''
let g:ale_linters = {
  \'Dockerfile': ['dockerfile_lint', 'hadolint']
\}
'''


# インデントの可視化
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

# 末尾の全角と半角の空白文字を赤くハイライト
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'szw/vim-tags'

# https://qiita.com/lighttiger2505/items/6b1cd3bc79cb9806a743
# カーソルの下の文字列に対して、定義・参照をそれぞれquickfix表示
[[plugins]]
repo = 'lighttiger2505/gtags.vim'
hook_add = '''
    " Options
    let g:Gtags_Auto_Map = 0
    let g:Gtags_OpenQuickfixWindow = 1
    " Keymap
    " Show definetion of function cursor word on quickfix
    "nmap <silent> K :<C-u>exe("Gtags ".expand('<cword>'))<CR>
    " Show reference of cursor word on quickfix
    "nmap <silent> R :<C-u>exe("Gtags -r".expand('<cword>'))<CR>
'''

# gtagsを非同期で自動更新してくれる
[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
    let g:gen_tags#gtags_auto_gen = 1
'''

# gitの便利操作がvimで出来る Gblameなど
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    " fugitive prefix -> <space + g>
    " <space + g> <space + s>で、git status発動
    " <space + g> <space + b>で、git blame発動
    nnoremap [fugitive] <Nop>
    nmap <space>g [fugitive]
    nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
    "nnoremap <silent> [fugitive]a :Gwrite<CR>
    "nnoremap <silent> [fugitive]c :Gcommit-v<CR>
    nnoremap <silent> [fugitive]b :Git blame<CR>
    nnoremap <silent> [fugitive]d :Gdiff<CR>
    nnoremap <silent> [fugitive]m :Gmerge<CR>

    " <space + g> <space + g>で検索中のキーワードに対してgit grep発動
    nnoremap <silent> [fugitive]g :Ggrep <C-r><C-w><CR>

    " Ggrep時に自動でquickfix-windowが開くようにする
    autocmd QuickFixCmdPost *grep* cwindow
'''

# gitの変更箇所を左側に表示してくれる
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    " 変更箇所のハイライト
    let g:gitgutter_highlight_lines = 0
    " タイピング停止時から反映されるまでの時間(デフォルト4000msec)
    set updatetime=250
'''

# tagbarがでる関数一覧などが出る
[[plugins]]
repo = 'majutsushi/tagbar'

# 細かい整形が出来るようなる
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
    " enterで整形設定に行くようにする
    vmap <Enter> <Plug>(EasyAlign)
'''

# 入力補完
#[[plugins]]
#repo = 'Shougo/neocomplcache'
#hook_add = '''
#    " Disable AutoComplPop. neocomplcashe
#    let g:acp_enableAtStartup = 0
#    " Use neocomplcache.
#    let g:neocomplcache_enable_at_startup = 1
#    " Use smartcase.
#    let g:neocomplcache_enable_smart_case = 1
#    " Set minimum syntax keyword length.
#    let g:neocomplcache_min_syntax_length = 3
#    let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
#
#    " Define dictionary.
#    let g:neocomplcache_dictionary_filetype_lists = {
#        \ 'default' : ''
#        \ }
#
#    " Plugin key-mappings.
#    inoremap <expr><C-g>     neocomplcache#undo_completion()
#    inoremap <expr><C-l>     neocomplcache#complete_common_string()
#
#    " Recommended key-mappings.
#    "" <CR>: close popup and save indent.
#    " inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
#    " function! s:my_cr_function()
#    "return neocomplcache#smart_close_popup() . "\<CR>"
#    "endfunction
#    " <TAB>: completion.
#    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
#    " <C-h>, <BS>: close popup and delete backword char.
#    inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
#    inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
#    inoremap <expr><C-y>  neocomplcache#close_popup()
#    inoremap <expr><C-e>  neocomplcache#cancel_popup()
#'''

# スニペットの補完機能
[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
    " Plugin key-mappings.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
        set conceallevel=2 concealcursor=niv
    endif

    " ~ファイルタイプ毎 & gitリポジトリ毎にtagsの読み込みpathを変える~
    function! ReadTags(type)
        try
            execute "set tags=".$HOME."/dotfiles/tags_files/".
                \ system("cd " . expand('%:p:h') . "; basename `git rev-parse --show-toplevel` | tr -d '\n'").
                \ "/" . a:type . "_tags"
        catch
            execute "set tags=./tags/" . a:type . "_tags;"
        endtry
    endfunction

    augroup TagsAutoCmd
    autocmd!
    autocmd BufEnter * :call ReadTags(&filetype)
    augroup END
'''

# スニペットé
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# 閉じ括弧補完
#[[plugins]]
#repo = 'cohama/lexima.vim'

# 検索結果の件数を表示
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
    " mapping
    noremap n <Plug>(anzu-n-with-echo)
    noremap N <Plug>(anzu-N-with-echo)
    noremap * <Plug>(anzu-star-with-echo)
    noremap # <Plug>(anzu-sharp-with-echo)
    " clear status
    "noremap <Esc><Esc> <Plug>(anzu-clear-search-status)
    " statusline
    set statusline=%{anzu#search_status()}
'''

[[plugins]]
repo = 'kana/vim-operator-user'

# open your files at the last edit position
[[plugins]]
repo = 'farmergreg/vim-lastplace'


# rust official plugin with rust formatter setting
[[plugins]]
repo = "rust-lang/rust.vim"
hook_add = '''
let g:rustfmt_autosave = 1
'''
# coc for LSP (for rust analyzer)
[[plugins]]
repo = 'neoclide/coc.nvim'
branch = 'release'
# [coc.nvim] build/index.js not found, please install dependencies and compile coc.nvim by: npm ci
# というエラーがでたら、vimで": call coc#util#install()"を実行

#!/bin/bash

#=====================================================================#
# FIle name   ：watch-and-run                                         #
# Description ：inotifyでファイルもしくはディレクトリを監視し、       #
#               変更を検出したら、任意のコマンドを実行するスクリプト  #
#                                                                     #
#               こんな感じで使うと、変更時に自動でmakeがかかって便利  #
#                 watch-and-run ./ make                               #
#                                                                     #
#=====================================================================#


#==============================================================#
# Define                                                       #
#==============================================================#

# printf色付け
EC_RN="\033[0;31m"   # printfの修飾 : Red
EC_RU="\033[4;31m"   # printfの修飾 : Red/Underscore(下線)
EC_GN="\033[0;32m"   # printfの修飾 : Green
EC_GU="\033[4;32m"   # printfの修飾 : Green/Underscore(下線)
EC_END="\033[0;39m"  # printfの修飾 : 適用解除

# 本スクリプトの名前
sh_name=`basename $0`

#==============================================================#
# Function name : usage_func                                   #
#==============================================================#

usage_func(){
    # メニュー表示
    printf    "\n"
    printf    "encoding for this script: UTF-8\n"
    printf    "===========================================================\n"
    printf    "Usage:\n"
    printf    "    ${EC_GN}$sh_name <path> <cmd>${EC_END}\n"
    printf    "         -> path : 監視したいファイルorディレクトリ\n"
    printf    "         -> cmd  : 変更を検出したときに実行するコマンド\n"
    printf    "===========================================================\n"
    printf    "\n"
}


#==============================================================#
# Main                                                         #
#==============================================================#

# パラメータ数チェック

if [ $# -ne 2 ]; then
    usage_func
    exit 1
fi

# パラメータを変数に格納
path=$1
shift
cmd=$*

# 第1パラメータチェック
if [ ! -e $path ]; then
    printf "Error : $1 not found.\n"
    exit 1
fi

printf    "===========================================================\n"
printf    " ${EC_GN}Start monitoring with ${sh_name}!${EC_END} \n"
printf "\n"
printf    " If a file change occurs in \"${EC_GN}${path}${EC_END}\", \n"
printf    " run the command \"${EC_GN}${cmd}${EC_END}\". \n"
printf    "===========================================================\n"

# 監視開始
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    while true ; do
        # linux
        #   -e modify : write等によるファイルの中身の変更を監視
        #   -e attrib : アクセス件やタイムスタンプ等のメタデータ変更を監視
        #   -r        : $pathを再帰的に監視
        #   --exluce  : .swpを監視対象から除外
        inotifywait -e modify -r --exclude \.swp $path 2> /dev/null
        #inotifywait -e modify -e attrib -r --exclude \.swp $path 2> /dev/null
        # inotifywaitが$pathの変更を検出したら、$cmd実行
        eval $cmd
        ret=$?

        if [ ${ret} -eq 0 ]; then
            printf "=========================================================== \n"
            printf " ${EC_GN}${cmd}${EC_END} \n"
            printf " ${EC_GN} --> OK (return 0)${EC_END} \n"
            printf "=========================================================== \n"
        else
            printf "=========================================================== \n"
            printf " ${EC_RN}${cmd}${EC_END} \n"
            printf " ${EC_RN} --> NG (return ${ret})${EC_END} \n"
            printf "=========================================================== \n"
        fi
    done
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OSX
    fswatch -o $path | xargs -n1 -I{} $cmd
    ::
elif [[ "$OSTYPE" == "cygwin" ]]; then
    # POSIX compatibility layer and Linux environment emulation for Windows
    ::
elif [[ "$OSTYPE" == "msys" ]]; then
    # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
    ::
elif [[ "$OSTYPE" == "win32" ]]; then
    # I'm not sure this can happen.
    ::
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    # ...
    ::
else
    # Unknown.
    ::
fi


exit 0

